{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Huffman",
				"HuffmanNode"
			],
			[
				"if",
				"ifmain\tif __name__ == '__main__'"
			],
			[
				"def",
				"defs\tMethod"
			],
			[
				"digit",
				"digitCounts"
			],
			[
				"pet",
				"pet_food"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/C/Users/gaosa/Documents/Coding/Algorithms/interview.py",
			"settings":
			{
				"buffer_size": 9221,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 33 files for \"inorder\"\n\nC:\\Users\\gaosa\\Documents\\Coding\\Algorithms\\balance.py:\n    5  3-node | two keys, three children \n    6  perfect balance - every path from root to None has same length\n    7: symmetric order - inorder traversal yields keys in ascending order \n    8  implementation is complicated \n    9  \n\nC:\\Users\\gaosa\\Documents\\Coding\\Algorithms\\nodes.py:\n   37  \troot   -- root of binary tree\n   38  \tmethod -- bfs (breadth-first search) or dfs (depth-first search)\n   39: \torder  -- inorder/preorder/postorder (only for dfs)\n   40  \t\"\"\"\n   41  \tif method.lower() == \"bfs\":\n   ..\n   54  \t\"\"\"recursive depth-first traversal of a binary tree\"\"\"\n   55  \tif root is None: return \n   56:     #   inorder traversal : left-node-right\n   57  \t#  preorder traversal : node-left-right\n   58  \t# postorder traversal : left-right-node\n   ..\n   63  \n   64  def _dfs_in(root):\n   65: \t\"\"\"inorder depth-first traversal of a binary tree\"\"\"\n   66  \tnode = root \n   67  \tstack = Stack()\n   ..\n   78  \"\"\"\n   79  #GENERATOR \n   80: def inorder(node):\n   81      if node:\n   82:         yield from inorder(node.left)\n   83          yield node.val\n   84:         yield from inorder(node.right)\n   85  \"\"\"\t\t\n   86  \n\nC:\\Users\\gaosa\\Documents\\Coding\\Algorithms\\tree.py:\n  223  \n  224  -------------------------------------------------------------------\n  225:  depth-first traversal |   inorder* | left -> root -> right | stack \n  226                         |  preorder  | root -> left -> right | stack\n  227                         | postorder  | left -> right -> root | stack \n  ...\n  275  \n  276  \tdef __iter__(self):\n  277: \t\t\"\"\"Inorder traversal (depth-first traversal)\"\"\"\n  278  \t\tself.queue = Queue()\n  279: \t\tself._inorder(self.root, self.queue)\n  280  \t\treturn self\n  281  \n  ...\n  298  \t\tpass\n  299  \n  300: \tdef _inorder(self, node, queue):\n  301: \t\t\"\"\"Depth-first inorder traverse the tree\"\"\"\n  302  \t\tif node is None:\n  303  \t\t\treturn\n  304: \t\tself._inorder(node.left, queue)\n  305  \t\tqueue.enqueue(node.key)\n  306: \t\tself._inorder(node.right, queue)\n  307  \n  308  \tdef _size(self, node):\n\nC:\\Users\\gaosa\\Documents\\Coding\\Algorithms\\strings\\sort.py:\n  344  \tdef keys(self):\n  345  \t\t\"\"\"Return all keys\"\"\"\n  346: \t\t#inorder traversal of trie\n  347  \t\tqueue = Queue()\n  348  \t\tself._collect(self.root, \"\", queue)\n\n15 matches across 4 files\n\n\nSearching 33 files for \"choose\"\n\nC:\\Users\\gaosa\\Documents\\Coding\\Algorithms\\interview.py:\n  275      \n  276  \n  277: def choose(n, k):\n  278:     \"\"\"combinatorics n choose k\"\"\"\n  279      ans = 1\n  280      for i in range(k):\n\nC:\\Users\\gaosa\\Documents\\Coding\\Algorithms\\minspan.py:\n  415  Repeat until optimaility conditions are satisfied -- relax any edge. \n  416  \n  417: How to choose which edge to relax?\n  418  - Dijkstra's algorithm (nonnegative weights)\n  419  - topological sort algorithm (no directed cycles)\n\nC:\\Users\\gaosa\\Documents\\Coding\\Algorithms\\practice.py:\n   48  \t\n   49  \tGraham scan algorithm:\n   50: \t- choose point p with smallest (or largest) y coordinate\n   51  \t- sort points by polar angle with p to get simple polygon\n   52  \t- consider points in order, and discard those that would create a clockwise turn\n\nC:\\Users\\gaosa\\Documents\\Coding\\Algorithms\\readme.txt:\n   19  \n   20  BFS with implicit digraph\n   21: * choose root web page as source s;\n   22  * maintain a queue of websites to explore;\n   23  * maintain a set of discovered websites;\n\nC:\\Users\\gaosa\\Documents\\Coding\\Algorithms\\strings\\search.py:\n  241  \tdef __init__(self, pattern):\n  242  \t\t\"\"\"Theory -- IF Q is a sufficiently large random prime (about M*N**2) then the probability of a false collision is about 1/N\n  243: \t\tPractice -- Choose to be a large prime (but not so large to cause overflow). Under reasonable assumptions, probability of a collision is about 1/Q\"\"\"\n  244  \t\tsuper(RabinKarp, self).__init__(pattern)\n  245  \t\tself.Q = randprime(16) #a large prime (but avoid overflow)\n\n6 matches across 5 files\n\n\nSearching 33 files for \"kmp\"\n\nC:\\Users\\gaosa\\Documents\\Coding\\Algorithms\\interview.py:\n  197  \n  198  \n  199: def KMP(pattern, text):\n  200      \"\"\"Knuth-Morris-Pratt algorithm for string search\n  201  \n\nC:\\Users\\gaosa\\Documents\\Coding\\Algorithms\\strings\\search.py:\n   90  \n   91  \n   92: class KMP(StringSearch):\n   93  \t\"\"\"Knuth-Morris-Pratt algorithm for string search\n   94: \tKMP substring search accesses no more than M + N chars to search for a \n   95  \tpattern of length M in a text of length N\n   96  \n   ..\n   98  \t\"\"\"\n   99  \tdef __init__(self, pattern):\n  100: \t\tsuper(KMP, self).__init__(pattern)\n  101  \t\tself._compute_dfa()\n  102  \n  ...\n  107  \t\twhere R is radix and M equals to length of pattern. Here, state \n  108  \t\tindicates the number of characters in the pattern that have been \n  109: \t\tmatched. Utilizing DFA, KMP algorithm can void backup. \n  110  \n  111  \t\tdfa[c][j] gives the next state of a pattern with first j characters \n  ...\n  304  \ttext = \"ABCCBAAAB\"\n  305  \tpattern = \"AAB\"\n  306: \tprint(KMP(pattern).search(text))\n  307  \tprint(BoyerMoore(pattern).search(text))\n  308  \tprint(RabinKarp(pattern).search(text))\n\n6 matches across 2 files\n",
			"settings":
			{
				"buffer_size": 5135,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "/C/Users/gaosa/Documents/Coding/Algorithms/pythonic.py",
			"settings":
			{
				"buffer_size": 5197,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/gaosa/Documents/Coding/Algorithms/sandbox.py",
			"settings":
			{
				"buffer_size": 425,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 164.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/gaosa/Documents/Coding/Algorithms",
		"/C/Users/gaosa/Documents/Coding/Algorithms/strings"
	],
	"file_history":
	[
		"/C/Users/gaosa/Documents/Coding/Algorithms/sandbox.py",
		"/C/Users/gaosa/Documents/Coding/algorithms/coatue.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/concepts.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/nodes.py",
		"/C/Users/gaosa/Documents/Coding/algorithms/practice.py",
		"/C/Users/gaosa/Documents/Coding/algorithms/test.py",
		"/C/Users/gaosa/Desktop/Coatue/README.txt",
		"/C/Users/gaosa/Documents/Coding/algorithms/number.py",
		"/C/Users/gaosa/Desktop/Coatue/coatue.py",
		"/C/Users/gaosa/Downloads/coatue.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/pythonic.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/test0.py",
		"/C/Users/gaosa/Documents/Coding/algorithms/test0.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/practice.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/readme.txt",
		"/C/Users/gaosa/Documents/Coding/algorithms/linprog.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/containers.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/number.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/strings/search.py",
		"/C/Users/gaosa/Documents/Coding/algorithms/strings/regex.py",
		"/C/Users/gaosa/Documents/Coding/algorithms/compression.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/string_sort.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/string_search.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/minspan.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/sort.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/string.py",
		"/C/Users/gaosa/Documents/Coding/cpp/test.cpp",
		"/C/Users/gaosa/Documents/Coding/cpp/cplusplus.cpp",
		"/C/Users/gaosa/Documents/Coding/Algorithms/behavioral.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/structural.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/patterns.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/digraph.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/graph.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/tree.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/linkedlist.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/test.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/interview.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/utilities.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/test2.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/temp.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/test3.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/priority.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/symbol.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/queue.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/stack.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/containers_ll.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/unionfind.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/bag.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/balance.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/hash.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/bst.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/sort_test.py",
		"/C/Users/gaosa/Documents/Python Scripts/lintcode.py",
		"/C/Users/gaosa/Documents/Python Scripts/citadel.py",
		"/C/Users/gaosa/Documents/Python Scripts/lintcode2.py",
		"/C/Users/gaosa/Desktop/python.py",
		"/C/Users/gaosa/Documents/Python Scripts/count_digits.py",
		"/C/Program Files (x86)/Vim/_vimrc",
		"/C/Users/gaosa/Desktop/_vimrc",
		"/C/Program Files (x86)/Vim/_vimrc - Copy",
		"/C/Users/gaosa/Documents/Python Scripts/exercise.py",
		"/C/Users/gaosa/Documents/Python Scripts/strategy.py",
		"/C/Users/gaosa/Documents/Python Scripts/chain.py",
		"/C/Users/gaosa/Documents/Python Scripts/fizzbuzz.py",
		"/C/Users/gaosa/Documents/Coding/Algorithms/union-find.txt",
		"/C/Users/gaosa/Documents/Python Scripts/citade.py",
		"/C/Users/gaosa/Documents/Python Scripts/citadel.oy",
		"/C/Users/gaosa/Documents/Python Scripts/PATTERNS",
		"/C/Users/gaosa/Documents/Python Scripts/chain",
		"/C/Users/gaosa/Documents/Python Scripts/observer.py",
		"/C/Users/gaosa/Documents/Python Scripts/visitor.py",
		"/C/Users/gaosa/Documents/Python Scripts/iterator.py",
		"/C/Users/gaosa/Documents/Python Scripts/bridge.py",
		"/C/Users/gaosa/Documents/Lynda.com/Python/2015 Python Design Patterns (Jungwoo Ryoo)/Exercise Files/Exercise Files/Ch04/04_06/iterator_final.py",
		"/C/Users/gaosa/Documents/Lynda.com/Python/2015 Python Design Patterns (Jungwoo Ryoo)/Exercise Files/Exercise Files/Ch04/04_02/observer_final.py",
		"/C/Users/gaosa/Documents/Python Scripts/builder.py",
		"/C/Users/gaosa/Documents/Python Scripts/prototype.py",
		"/C/Users/gaosa/Documents/Python Scripts/decorator.py",
		"/C/Users/gaosa/Documents/Python Scripts/proxy.py",
		"/C/Users/gaosa/Documents/Python Scripts/adapter.py",
		"/C/Users/gaosa/Documents/Python Scripts/composite.py",
		"/C/Users/gaosa/Documents/Python Scripts/prototype",
		"/C/Users/gaosa/Documents/Python Scripts/pattern.py",
		"/C/Users/gaosa/Documents/Python Scripts/singleton.py",
		"/C/Users/gaosa/Documents/Python Scripts/abstractfactory.py",
		"/C/Users/gaosa/Documents/Python Scripts/factory.py",
		"/C/Users/gaosa/Documents/Python Scripts/helloworld.py"
	],
	"find":
	{
		"height": 27.0
	},
	"find_in_files":
	{
		"height": 104.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"between",
			"kmp",
			"choose",
			"inorder",
			"bisect",
			"permutation",
			"neighbor",
			"product",
			"reduce",
			"ceil",
			"sieve",
			"csv",
			"\n\t",
			"array",
			"string",
			"max",
			"ceil",
			"ceiling",
			"max",
			"dfs",
			"zip(*",
			"flatten ",
			"ceil",
			"1",
			"\"\"\"",
			"isprime",
			"power",
			"powerset",
			"travers",
			"graham",
			"convex",
			"length",
			"AAAAB",
			"\" ",
			"edge_to",
			"vertices",
			" \n",
			"BSTNode",
			"bstnode",
			"node",
			"NodeBST",
			"nodebst",
			"node"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"bits",
			"TreeNode"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/C/Users/gaosa/Documents/Coding/Algorithms/interview.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9221,
						"regions":
						{
						},
						"selection":
						[
							[
								5869,
								5869
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3497.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5135,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										226,
										233
									],
									[
										505,
										512
									],
									[
										712,
										719
									],
									[
										895,
										902
									],
									[
										1037,
										1044
									],
									[
										1098,
										1105
									],
									[
										1173,
										1180
									],
									[
										1384,
										1391
									],
									[
										1631,
										1638
									],
									[
										1721,
										1728
									],
									[
										1822,
										1829
									],
									[
										1874,
										1881
									],
									[
										1961,
										1968
									],
									[
										2035,
										2042
									],
									[
										2227,
										2234
									],
									[
										2473,
										2479
									],
									[
										2517,
										2523
									],
									[
										2733,
										2739
									],
									[
										2977,
										2983
									],
									[
										3293,
										3299
									],
									[
										3680,
										3686
									],
									[
										4078,
										4081
									],
									[
										4259,
										4262
									],
									[
										4344,
										4347
									],
									[
										4544,
										4547
									],
									[
										4798,
										4801
									],
									[
										4987,
										4990
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								3964,
								3964
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 3,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 2341.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/C/Users/gaosa/Documents/Coding/Algorithms/pythonic.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5197,
						"regions":
						{
						},
						"selection":
						[
							[
								1480,
								1483
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3186.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/C/Users/gaosa/Documents/Coding/Algorithms/sandbox.py",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 425,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 40.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 216.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "algorithms.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"C:\\Users\\gaosa\\Documents\\Coding\\algorithms\\algorithms.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 219.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
